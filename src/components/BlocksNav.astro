---
import { getCollection } from 'astro:content'

const blocks = await getCollection('blocks')
const currentPath = Astro.url.pathname

const links = blocks.map((page) => ({
    name: page.data.title,
    href: page.slug,
    active: currentPath.includes(page.slug),
}))
---

<script>
    document.addEventListener('astro:page-load', () => {
        const linksParent = document.querySelector('#linksParent') as HTMLElement
        const blocksNav = document.querySelector('#blocks-nav') as HTMLElement

        window.addEventListener('scroll', () => {
            const scrollY = window.scrollY

            if (scrollY > blocksNav.getBoundingClientRect().top) {
                blocksNav.classList.remove('border-transparent')
                blocksNav.classList.add('border-white/50', 'bg-white/75', 'backdrop-blur-xl', 'dark:bg-gray-950/75', 'dark:border-white/5')
                blocksNav.classList.replace('outline-transparent', 'outline-gray-950/10')
            } else {
                blocksNav.classList.remove('border-white/50', 'bg-white/75', 'backdrop-blur-xl', 'dark:bg-gray-950/75', 'dark:border-white/5')
                blocksNav.classList.add('border-transparent')
                blocksNav.classList.replace('outline-gray-950/10', 'outline-transparent')
            }
        })

        // Set the indicator position and width
        const activeLink = document.querySelector('.active-link') as HTMLElement
        const indicator = document.querySelector('#indicator') as HTMLElement

        if (activeLink && indicator) {
            const linkRect = activeLink.getBoundingClientRect()
            const parentRect = linksParent.getBoundingClientRect()
            indicator.style.width = `${linkRect.width}px`
            indicator.style.transform = `translateX(${linkRect.left - parentRect.left}px)`
        }
    })
</script>

<div class="absolute inset-x-0 z-20 mx-auto -mt-[3px] h-12 border-y border-gray-950/[0.07] dark:border-white/5"></div>
<div id="blocks-nav" class="rounded-card sticky top-2 z-30 mx-auto max-w-[calc(80rem-6px)] border border-transparent outline outline-1 outline-transparent duration-300 lg:px-4 dark:outline-transparent">
    <div class="[--body-text-color:theme(colors.gray.600)] dark:[--body-text-color:theme(colors.gray.400)]">
        <nav class="relative">
            <span transition:name="nav-indicator" class="absolute bottom-0 block h-0.5 px-3" id="indicator">
                <span class="block h-full rounded-t-full bg-primary-500"></span>
            </span>

            <ul id="linksParent" class="flex gap-3 overflow-x-auto">
                {
                    links.map((link) => (
                        <li>
                            <a href={link.href} class={`hover:text-title block w-max text-nowrap px-3 pb-3 pt-2.5 text-sm transition-colors duration-200 ${link.active ? 'active-link text-title' : 'text-body'}`}>
                                {link.name}
                            </a>
                        </li>
                    ))
                }
            </ul>
        </nav>
    </div>
</div>
